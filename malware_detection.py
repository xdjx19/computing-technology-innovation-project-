import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns

# Load dataset
df = pd.read_csv("data/malware_dataset.csv")

# Drop ID-like columns if present
if "hash" in df.columns:
    df = df.drop(columns=["hash"])

# Features and target
X = df.drop(columns=["classification"])
y = df["classification"].map({"benign": 0, "malware": 1})  # encode labels

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train model
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Predictions
y_pred = rf.predict(X_test)

# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
report = classification_report(y_test, y_pred)
print(report)

# Save report
with open("results/malware_report.txt", "w") as f:
    f.write(report)

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Greens", xticklabels=["Benign", "Malware"], yticklabels=["Benign", "Malware"])
plt.title("Malware Detection Confusion Matrix")
plt.savefig("results/malware_confusion_matrix.png")
plt.show()

# Feature importance
importances = rf.feature_importances_
feat_imp = pd.DataFrame({"Feature": X.columns, "Importance": importances})
feat_imp = feat_imp.sort_values("Importance", ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(x="Importance", y="Feature", data=feat_imp.head(15))
plt.title("Top 15 Important Features (Malware Detection)")
plt.savefig("results/feature_importance.png")
plt.show()