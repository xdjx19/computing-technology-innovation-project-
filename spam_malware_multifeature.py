# spam_malware_multifeature.py

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.compose import ColumnTransformer
from sklearn.base import BaseEstimator, TransformerMixin
import joblib

# ----------------------
# 1. Load Dataset
# ----------------------
# Example dataset: columns = ['text', 'attachment_size', 'num_links', 'label']
data = pd.read_csv('spam_malware_dataset.csv')
data.dropna(inplace=True)

# Encode target labels
label_encoder = LabelEncoder()
data['label_enc'] = label_encoder.fit_transform(data['label'])  # spam/malware=1, safe=0

# Train/test split
X = data[['text', 'attachment_size', 'num_links']]  # features
y = data['label_enc']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# ----------------------
# 2. Custom Transformer for Text
# ----------------------
class TextSelector(BaseEstimator, TransformerMixin):
    def fit(self, X, y=None):
        return self
    def transform(self, X):
        return X['text']

# ----------------------
# 3. Preprocessing + Feature Engineering
# ----------------------
# TF-IDF for text, StandardScaler for numeric metadata
preprocessor = ColumnTransformer(
    transformers=[
        ('text', TfidfVectorizer(stop_words='english', ngram_range=(1,2), max_df=0.9, min_df=5), 'text'),
        ('num_features', StandardScaler(), ['attachment_size', 'num_links'])
    ]
)

# ----------------------
# 4. Model Pipeline
# ----------------------
model_pipeline = Pipeline([
    ('features', preprocessor),
    ('classifier', RandomForestClassifier(n_estimators=200, random_state=42))
])

# ----------------------
# 5. Train Model
# ----------------------
model_pipeline.fit(X_train, y_train)

# ----------------------
# 6. Evaluate Model
# ----------------------
y_pred = model_pipeline.predict(X_test)

def evaluate(y_true, y_pred):
    print("Accuracy:", accuracy_score(y_true, y_pred))
    print("Precision:", precision_score(y_true, y_pred))
    print("Recall:", recall_score(y_true, y_pred))
    print("F1 Score:", f1_score(y_true, y_pred))
    print("\nClassification Report:\n", classification_report(y_true, y_pred))

evaluate(y_test, y_pred)

# ----------------------
# 7. Save Model
# ----------------------
joblib.dump(model_pipeline, 'spam_malware_multifeature_model.pkl')

# ----------------------
# 8. Predict Function
# ----------------------
def predict_spam_malware(df_new):
    preds = model_pipeline.predict(df_new)
    return label_encoder.inverse_transform(preds)

# Example usage
sample_data = pd.DataFrame({
    'text': ["You've won a free iPhone!", "Please review the attached report"],
    'attachment_size': [0, 1024],
    'num_links': [1, 0]
})
print("Predictions:", predict_spam_malware(sample_data))
